"""
Script Description:
This Python script processes HDF5 files containing RGB and IMU data from underwater robotics experiments. It extracts RGB images along with associated non-image data (IMU and RGB metadata with timestamps), saving them for further analysis. The script is designed to handle files generated by the underwater hyperspectral imaging system. 

Author: Leonard GÃ¼nzel
Date: 21.11.2023

Dependencies:
- h5py: For handling HDF5 files.
- numpy and pandas: For data manipulation and analysis.
- os: For interacting with the operating system.
- PIL.Image: For working with images.
- glob: For file path pattern matching.
- argparse: For parsing command-line arguments.

Usage:
- Run the script with appropriate command-line arguments to process HDF5 files and extract RGB images and IMU data.

Command Line Arguments:
--folder_path: Path to the folder containing HDF5 files.
--save_path: Path to the folder where extracted RGB images and IMU data will be saved.
--save_name: Base name for saved files. If not given, the h5 filename of the first transect is used.

Example:
python script_name.py --folder_path "/path/to/hdf5_files" --save_path "/path/to/save/folder" --save_name "experiment_data"

Note: Ensure that the required dependencies are installed before running the script.
"""

import h5py
import numpy as np
import pandas as pd
import os
from PIL import Image
import glob
import argparse
from scipy.spatial.transform import Slerp
from scipy.spatial.transform import Rotation as R

def get_args():
    parser = argparse.ArgumentParser(description='Process .h5 files to extract RGB data and IMU data.')
    parser.add_argument('--folder_path', type=str, default="/media/leo/NESP_1/NTNU/UHI_Data/Slettvik_29092023/Transect2", help='Path to the folder containing HDF5 files.')
    parser.add_argument('--save_path', type=str, default="/media/leo/NESP_1/NTNU/UHI_Data/Slettvik_29092023/Transect2/Extracted_RGB/", help='Path to the folder where extracted RGB images and IMU data will be saved.')
    parser.add_argument('--save_name', type=str, default="", help='Base name for saved files. If not given the h5 filename of the first transect is used')
    return parser.parse_args()


def main(folder_path, save_path, save_name):
    # Check for the existence of the Extracted_RGB folder or create it
    if not os.path.exists(save_path):
        os.makedirs(save_path)
        print("Created the directory:", save_path)
    else:
        print("Directory already exists:", save_path)

    # Initialize a list to hold all the data
    data_entries = []

    # Counter for images across files
    image_counter = 0

    # Find all .h5 files in the folder
    h5_files = glob.glob(os.path.join(folder_path, '*.h5'))

    # Initialize an empty DataFrame to collect IMU data
    df_imu = pd.DataFrame()

    # Initialize an empty DataFrame to collect Altimeter data
    df_alti = pd.DataFrame()

    for file_path in h5_files:
        print(f"Extracting files from: {file_path}")
        if save_name == "":
            # Extract the timestamp from the file name for each file
            save_name = os.path.basename(file_path).split('.')[0]

        # Open the HDF5 file
        with h5py.File(file_path, "r") as file:
            # Handle IMU data if available
            rawdata_imu = file.get('/rawdata/navigation/imu')
            if rawdata_imu:
                imu_data = {name: rawdata_imu[name][()].tolist() for name in rawdata_imu}
                df_imu = pd.concat([df_imu, pd.DataFrame(imu_data)], ignore_index=True)

            # Handle Altimeter data if available
            rawdata_alti = file.get('/rawdata/navigation/altitude')
            if rawdata_alti:
                alti_data = {name: rawdata_alti[name][()].tolist() for name in rawdata_alti}
                df_alti = pd.concat([df_alti, pd.DataFrame(alti_data)], ignore_index=True)
            
            # Navigate to the '/rawdata/rgb' group
            rawdata_rgb = file['/rawdata/rgb']
            
            # Process non-image data
            non_image_data = {name: rawdata_rgb[name][()].tolist() for name in rawdata_rgb if name != 'rgbFrames'}

            # Now handle RGB data
            rgb_dataset = rawdata_rgb['rgbFrames']
            for i, img_data in enumerate(rgb_dataset):
                img_array = np.array(img_data)
                if img_array.ndim == 3:  # Confirm it's an RGB image
                    # Save the image
                    img = Image.fromarray(img_array.astype('uint8'))
                    img_name = f"{save_name}_image_{image_counter}.png"
                    img.save(os.path.join(save_path, img_name))

                    # Collect the associated non-image data for this particular image
                    non_image_data_for_img = {key: val[i] for key, val in non_image_data.items()}

                    # Add the image information and non-image data to the data_entries list
                    row_data = {
                        'FileName': img_name,
                        'SourceFile': save_name,
                        **non_image_data_for_img  # Unpack the non-image data dictionary here
                    }
                    data_entries.append(row_data)
                    image_counter += 1

    # Convert the list of dictionaries to a DataFrame
    df_rgb = pd.DataFrame(data_entries)

    # Save the DataFrames to CSV files
    df_rgb.to_csv(os.path.join(save_path, 'rgb_data.csv'), index=False)
    if not df_imu.empty:
        df_imu.to_csv(os.path.join(save_path, 'imu_data.csv'), index=False)

    if not df_alti.empty:
        df_alti.to_csv(os.path.join(save_path, 'altimeter_data.csv'), index=False)
    
    print("All .h5 files have been processed.")
    print("Now the three datasets are interpolated according to the RGB dataset.")

    interpolate_csv(df_rgb, df_imu, df_alti)


def interpolate_csv(df_rgb, df_imu, df_alti, save_path):
    """
    This definition interpolates the Heading, Pitch, Roll and Altimeter data to rgb_timestamp
    """
    # Interpolate Heading, Pitch and Roll to rgb_timestamp
    print(f"Reducing timestamps from IMU data from {len(df_imu.index)} to {len(df_rgb.index)}")
    imu_quaternions = df_imu[['Quaternion0', 'Quaternion1', 'Quaternion2', 'Quaternion3']].to_numpy()
    
    # Create Slerp instance for interpolation
    imu_rot_slerp = Slerp(df_imu['TimestampMeasured'].tolist(), R.from_quat(imu_quaternions))
    
    # Assuming df_rgb has a 'timestamp' column interpolate
    interp_imu_rot = imu_rot_slerp(df_rgb['timestamp'].tolist())

    # Translate Quaternions to Euler
    interp_imu_rot = interp_imu_rot.as_euler('xyz', degrees=True)
    interp_immu_csv = pd.DataFrame(interp_imu_rot, columns=['X', 'Y', 'Z'])

    # Merging the RGB information and interpolated IMU information
    rgb_imu_merged = pd.merge(df_rgb, interp_immu_csv, left_index=True, right_index=True)
    
    """
    og_imu_numpy = R.from_quat(imu_quaternions).as_euler('xyz', degrees=True)
    df_og_imu = pd.DataFrame(og_imu_numpy, columns=['X', 'Y', 'Z'])
    #interp_immu_csv.to_csv(os.path.join(save_path, 'interp_imu_data.csv'), index=False)
    #df_og_imu.to_csv(os.path.join(save_path, 'og_imu_data.csv'), index=False)

    #print(R.from_quat(imu_quaternions).as_euler('xyz', degrees=True))
    #print(interp_imu_rot.as_euler('xyz', degrees=True))
    
    """

    # Linear Interpolate Altimeter to rgb_timestamps
    print(f"Reducing timestamps from IMU data from {len(df_alti.index)} to {len(df_rgb.index)}")
    interp_alti_np = np.interp(df_rgb['timestamp'].tolist(), df_alti['TimestampMeasured'].tolist(), df_alti['Altitude'].tolist())
    interp_alti_df = pd.DataFrame(interp_alti_np, columns=['Altimeter'])
    # Combine all interpolations
    rgb_imu_alti_merged = pd.merge(rgb_imu_merged, interp_alti_df, left_index=True, right_index=True)
    
    # Save CSV
    rgb_imu_alti_merged.to_csv(os.path.join(save_path, 'rgb_imu_alti_merged.csv'), index=False)

if __name__ == '__main__':
    args = get_args()
    #main(args.folder_path, args.save_path, args.save_name)

    # For Testing purposes
    df_rgb = pd.read_csv("/media/leo/NESP_1/NTNU/UHI_Data/Slettvik_29092023/Transect2/Extracted_RGB/rgb_data.csv")
    df_imu = pd.read_csv("/media/leo/NESP_1/NTNU/UHI_Data/Slettvik_29092023/Transect2/Extracted_RGB/imu_data.csv")
    df_alti = pd.read_csv("/media/leo/NESP_1/NTNU/UHI_Data/Slettvik_29092023/Transect2/Extracted_RGB/altimeter_data.csv")
    save_path = "/media/leo/NESP_1/NTNU/UHI_Data/Slettvik_29092023/Transect2/Extracted_RGB/"
    interpolate_csv(df_rgb, df_imu, df_alti, save_path)